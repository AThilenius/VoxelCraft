{
  "Name": "VoxelFallback",
  "Attributes": [
    {
      "AttributeType": "Position0",
      "Name": "position"
    },
    {
      "AttributeType": "Normal0",
      "Name": "normal"
    },
    {
      "AttributeType": "Color0",
      "Name": "color"
    }
  ],
  "Uniforms": [
    {
      "ValueType": "Matrix4",
      "Name": "ViewMatrix"
    },
    {
      "ValueType": "Matrix4",
      "Name": "ModelMatrix"
    },
    {
      "ValueType": "Vector3",
      "Name": "LightInvDirection_worldspace"
    }
  ],
  "VertexShader": "

// =====   Vertex Shader Code     ======================================================
#version 150
in vec4 position;
in int normal;
in vec4 color;

out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec4 colorVarying;

uniform mat4 MVP;
uniform mat4 ViewMatrix;
uniform mat4 ModelMatrix;
uniform vec3 LightInvDirection_worldspace;
uniform vec3 NormalLookupTable[6] = vec3[6] (
	vec3(-1.0, 0.0, 0.0),
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, -1.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, -1.0),
	vec3(0.0, 0.0, 1.0)
);

void main()
{
	vec3 vertexNormal_modelspace = NormalLookupTable[int(normal)];
	
	gl_Position =  MVP * position;
	colorVarying = color;
	Position_worldspace = ( ModelMatrix * position ).xyz;
	LightDirection_cameraspace = ( ViewMatrix * vec4( LightInvDirection_worldspace, 0 ) ).xyz;
	Normal_cameraspace = ( ViewMatrix * ModelMatrix * vec4( vertexNormal_modelspace, 0 ) ).xyz;
}


",
  "FragmentShader": "

// =====   Fragment Shader Code   ======================================================
#version 150
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 colorVarying;

out vec4 color;

void main()
{
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0, 1 );

	color = 
	colorVarying * 0.6 +
	colorVarying * cosTheta * 0.3;

	color.w = colorVarying.w;
}


"
}